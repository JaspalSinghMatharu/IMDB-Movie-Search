{"version":3,"sources":["components/Input.js","AutoComplete.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","label","id","value","placeholder","handleChange","className","htmlFor","onChange","defaultProps","AutoComplete","useState","search","setSearch","movies","setMovies","selectedMovie","setSelectedMovie","useEffect","console","log","handleMovieSelection","e","movieSelected","movieId","target","getAttribute","filter","movie","imdbID","debouncedGetMovies","useCallback","debounce","param","searchText","url","fetch","then","data","json","Response","filteredSearchData","Search","splice","alert","Error","catch","getMovies","inputValue","length","map","item","onClick","Title","src","Poster","alt","Year","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAsBMA,EAAQ,SAACC,GACX,IAAOC,EAA+CD,EAA/CC,MAAOC,EAAwCF,EAAxCE,GAAIC,EAAoCH,EAApCG,MAAOC,EAA6BJ,EAA7BI,YAAaC,EAAgBL,EAAhBK,aACtC,OACI,sBAAKC,UAAU,YAAf,UACKL,GAAS,uBAAOM,QAASL,EAAII,UAAU,aAA9B,SAA4CL,IACtD,uBAAOK,UAAU,aAAaF,YAAaA,EAAaD,MAAOA,EAAOD,GAAIA,EAAIM,SAAUH,QAMpGN,EAAMU,aAjBe,CACjBN,MAAO,GACPC,YAAa,SACbH,MAAO,IAgBIF,QC4CAW,EA3EM,SAACV,GAClB,MAA4BW,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0CJ,mBAAS,MAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAGAC,qBAAU,WACNC,QAAQC,IAAIJ,KACb,CAACA,IAEJ,IAAMK,EAAuB,SAACC,GAC1B,IAAIC,EACAC,EAAUF,EAAEG,OAAOC,aAAa,gBACjCF,IACCD,EAAgBT,EAAOa,QAAO,SAACC,GAAD,OAAWA,EAAMC,SAAWL,MAE9DP,EAAiBM,EAAc,IAC/BR,EAAU,KAkBRe,EAAqBC,sBAAYC,KAAS,SAACC,IAf/B,SAACC,GACf,IAAIC,EAAG,oCAAgCD,EAAhC,oBACPE,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAAQF,MAAK,SAACC,GACzC,GAAqB,SAAlBA,EAAKE,SAAqB,CACzB,IAAIC,EAAqBH,EAAKI,OAAOC,OAAO,EAAE,GAC9C5B,EAAU0B,QAGVG,MAAMN,EAAKO,UAEhBC,OAAM,SAACxB,GACNH,QAAQC,IAAIE,MAIwCyB,CAAUd,KAAS,KAAM,IAUrF,OACI,qCACI,sBAAK3B,UAAU,uBAAf,UACI,cAAC,EAAD,CAAOH,MAAOS,EAAQX,MAAM,mBAAmBG,YAAY,iBAAiBF,GAAG,eAAeG,aAXhF,SAACiB,GACvB,IAAI0B,EAAa1B,EAAEG,OAAOtB,MAC1BU,EAAUmC,GACNA,EAAWC,OAAS,GACpBnB,EAAmBkB,MAQdlC,GACG,oBAAIR,UAAU,sBAAd,SACKQ,EAAOoC,KAAI,SAACC,GACT,OACI,oBAAI,eAAcA,EAAKtB,OAA0BvB,UAAU,sBAAsB8C,QAAS/B,EAA1F,SAAiH8B,EAAKE,OAAlFF,EAAKtB,gBAM5Db,GACG,qBAAKV,UAAU,qBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAKgD,IAAKtC,EAAcuC,OAAQC,IAAKxC,EAAcqC,QACnD,sBAAK/C,UAAU,eAAf,UACI,oBAAGA,UAAU,cAAb,0BAAwC,+BAAOU,EAAcqC,WAC7D,mDAAsBrC,EAAcyC,oBC1DjDC,MARf,WACE,OACE,qBAAKpD,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.00dba61c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst propTypes = {\r\n    /** value of the input feild */\r\n    value: PropTypes.string,\r\n    /** Placeholder text for input feild */\r\n    placeholder: PropTypes.string,\r\n    /** Label for the input feild */\r\n    label: PropTypes.string,\r\n    /** id for the input */\r\n    id: PropTypes.string,\r\n    /** A function to be called on input change */\r\n    handleChange: PropTypes.func,\r\n}\r\n\r\nconst defaultProps = {\r\n    value: '',\r\n    placeholder: 'Select',\r\n    label: \"\",\r\n}\r\n\r\nconst Input = (props) => {\r\n    const {label, id, value, placeholder, handleChange} = props;\r\n    return (\r\n        <div className=\"form-item\">\r\n            {label && <label htmlFor={id} className=\"form-label\">{label}</label>}\r\n            <input className=\"form-input\" placeholder={placeholder} value={value} id={id} onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nInput.propTypes = propTypes;\r\nInput.defaultProps = defaultProps;\r\n\r\nexport default Input;","import React, { useEffect, useState, useCallback } from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport Input from './components/Input';\r\n\r\nconst AutoComplete = (props) => {\r\n    const [search, setSearch] = useState('');\r\n    const [movies, setMovies] = useState([]);\r\n    const [selectedMovie, setSelectedMovie] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(selectedMovie)\r\n    }, [selectedMovie]) \r\n\r\n    const handleMovieSelection = (e) => {\r\n        let movieSelected;\r\n        let movieId = e.target.getAttribute('data-movieId');\r\n        if(movieId) {\r\n            movieSelected = movies.filter((movie) => movie.imdbID === movieId);\r\n        }\r\n        setSelectedMovie(movieSelected[0]);\r\n        setMovies([]);\r\n    }\r\n\r\n    const getMovies = (searchText) => {\r\n        let url = `http://www.omdbapi.com/?s=${searchText}&apikey=50314ef2`\r\n        fetch(url).then((data) => data.json()).then((data) => {\r\n            if(data.Response === 'True') {\r\n                let filteredSearchData = data.Search.splice(0,5);\r\n                setMovies(filteredSearchData);\r\n            }\r\n            else {\r\n                alert(data.Error)\r\n            }\r\n        }).catch((e) => {\r\n            console.log(e)\r\n        })\r\n    }\r\n    \r\n    const debouncedGetMovies = useCallback(debounce((param) => {getMovies(param)}, 300), [])\r\n\r\n    const handleMovieSearch = (e) => {\r\n        let inputValue = e.target.value;\r\n        setSearch(inputValue);\r\n        if (inputValue.length > 3) {\r\n            debouncedGetMovies(inputValue);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"autocomplete-wrapper\">\r\n                <Input value={search} label=\"Enter movie name\" placeholder=\"Type to search\" id=\"autoComplete\" handleChange={handleMovieSearch} />\r\n                {movies &&\r\n                    <ul className=\"search-results-list\">\r\n                        {movies.map((item) => {\r\n                            return (\r\n                                <li data-movieId={item.imdbID} key={item.imdbID} className=\"search-result__item\" onClick={handleMovieSelection}>{item.Title}</li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                }\r\n            </div>\r\n            {selectedMovie && \r\n                <div className=\"movie-card-wrapper\">\r\n                    <div className=\"movie-card\">\r\n                        <img src={selectedMovie.Poster} alt={selectedMovie.Title} />\r\n                        <div className=\"movie-detail\">\r\n                            <p className=\"movie-title\">Movie Name : <span>{selectedMovie.Title}</span></p>\r\n                            <span>Released Year: {selectedMovie.Year}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default AutoComplete","import './App.css';\nimport AutoComplete from './AutoComplete';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <AutoComplete />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}